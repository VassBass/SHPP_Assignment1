package com.shpp.p2p.cs.ivasyliev.assignment1;

/**
 * –£ —Ü—å–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—ñ –ö–∞—Ä–µ–ª—É –¥–æ—Ä—É—á–∏–ª–∏ —Å—Ç–≤–æ—Ä–∏—Ç–∏ ‚Äú—à–∞—Ö—ñ–≤–Ω–∏—Ü—é‚Äù –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –±—ñ–ø–µ—Ä–∞ –≤ –ø—Ä—è–º–æ–∫—É—Ç–Ω–æ–º—É
 * (–ø—Ä–æ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫ –±—É–¥—å-–ª–∞—Å–∫–∞ –∑–∞–≥—É–≥–ª—ñ—Ç—å —â–æ —Ç–∞–∫–µ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫ üòÉ ) –ø—É—Å—Ç–æ–º—É –°–≤—ñ—Ç—ñ (—Ñ—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–ª–æ–∂–µ–Ω–Ω—è —ñ –Ω–∞–ø—Ä—è–º–æ–∫ –ö–∞—Ä–µ–ª–∞ –Ω–µ –≤–∞–∂–ª–∏–≤—ñ).
 *
 * –í–∞–º —è–≤–Ω–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –ø–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è, —â–æ –≤–∞—à –∫–æ–¥ –≤–∏—Ä—ñ—à—É—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —Å–≤—ñ—Ç–∞–º–∏ –≤—ñ–¥–º—ñ–Ω–Ω–∏–º–∏ –≤—ñ–¥ 8—Ö8, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 3—Ö5 —ñ —Ç.–¥.
 * –í–∞–∂–ª–∏–≤–æ, —â–æ–± –æ–¥–∏–Ω –∑ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—Ö –±—ñ–ø–µ—Ä—ñ–≤ –∑–Ω–∞—Ö–æ–¥–∏–≤—Å—è —É –ø—ñ–≤–¥–µ–Ω–Ω–æ-–∑–∞—Ö—ñ–¥–Ω–æ–º—É –∫—É—Ç—ñ –∫–∞—Ä—Ç–∏.
 *
 * –ö–∞—Ä–µ–ª –ø–æ—á–∏–Ω–∞—î –∑–∞–≤–∂–¥–∏ –∑ –ø—ñ–≤–¥–µ–Ω–Ω–æ-–∑–∞—Ö—ñ–¥–Ω–æ–≥–æ –∫—É—Ç–∞, –¥–∏–≤–ª—è—á–∏—Å—å –Ω–∞ —Å—Ö—ñ–¥, + —Ç–∞–∫–æ–∂ –ø–µ—Ä–µ–¥–±–∞—á–∞—î—Ç—å—Å—è, —â–æ —Å–≤—ñ—Ç —á–∏—Å—Ç–∏–π –≤—ñ–¥ –±—ñ–ø–µ—Ä—ñ–≤ —ñ —Å—Ç—ñ–Ω.
 *
 * –ù–µ –∑–∞–±—É–≤–∞–π—Ç–µ, —â–æ —Ä—ñ–≤–Ω—ñ —Ç–∞–∫–æ–∂ –º–æ–∂—É—Ç—å –±—É—Ç–∏ 1 –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ –≤ —à–∏—Ä–∏–Ω—É –∞–±–æ –Ω–∞–≤–ø–∞–∫–∏: –≤—Å—å–æ–≥–æ 1 –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ —É –≤–∏—Å–æ—Ç—É.
 * –¶–µ –∑–∞–≤–¥–∞–Ω–Ω—è –º–æ–∂–Ω–∞ –≤–∏—Ä—ñ—à—É–≤–∞—Ç–∏ —Ä—ñ–∑–Ω–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏, —ñ –æ–¥–Ω—ñ —ñ—Å—Ç–æ—Ç–Ω–æ –ª–µ–≥—à–µ –Ω—ñ–∂ —ñ–Ω—à—ñ.
 *
 * –ü–æ —Å—É—Ç—ñ, –Ω–µ–º–∞—î –Ω—ñ—á–æ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ –≤ —Ç–æ–º—É, —â–æ –ö–∞—Ä–µ–ª —Ö–æ–¥–∏—Ç–∏–º–µ –ø–æ —Ç–∏–º –¥–æ—Ä—ñ–∂–∫–∞–º, –¥–µ –≤–∂–µ —Ö–æ–¥–∏–≤ ‚Äî –Ω–µ –Ω–∞–º–∞–≥–∞–π—Ç–µ—Å—è –≤–∏–≥–∞–¥—É–≤–∞—Ç–∏ —è–∫–∏–π—Å—å ‚Äú–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π‚Äù –∞–ª–≥–æ—Ä–∏—Ç–º.
 */
public class Assignment1Part4 extends VassBassKarel {

    @Override
    public void run() throws Exception {
        moveToStartCell();
        // Karel puts the beeper to the first cell
        putBeeper();
        // Then he's trying to do next step
        tryToStep();
        say("Bee-boo-doo-bee-dap!");
    }

    /**
     * Karel moves to cell in south-west and turns to east
     */
    public void moveToStartCell() throws Exception {
        turnToWest();
        while (frontIsClear()) move();
        turnLeft();
        while (frontIsClear()) move();
        turnLeft();
    }

    public void tryToStep() throws Exception {
        // Check if Karel can go forward
        if (frontIsClear()) {
            // If he can - he's doing a step and repeats this action
            step();
            tryToStep();
        } else {
            // If he can't - he checks that are next row is exist
            if ((facingEast() && leftIsClear()) || (facingWest() && rightIsClear())) {
                // If exist - he's going to the next row and repeats this action
                goToNextRow();
                tryToStep();
            }
            // If the next row does not exist - the mission is complete!
        }
    }

    /**
     * Karel looks in the cell where he is standing,
     * and if he does not see the beeper - he moves forward and puts the beeper in the next cell,
     * otherwise - only moves forward.
     * @throws Exception if Kernel hits a wall (try not to do this, it hurts)
     */
    public void step() throws Exception {
        if (beepersPresent()) {
            move();
        } else {
            move();
            putBeeper();
        }
    }

    /**
     * Karel looks in the cell where he is standing,
     * and if he does not see the beeper - he moves to the next row and puts the beeper in the next cell,
     * otherwise - only moves to the next row.
     * @throws Exception if Kernel hits a wall (try not to do this, it hurts)
     */
    public void goToNextRow() throws Exception {
        if (facingEast()) {
            turnLeft();
            step();
            turnLeft();
        } else if (facingWest()) {
            turnRight();
            step();
            turnRight();
        }
    }
}
